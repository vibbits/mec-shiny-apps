tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
um_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(!!!nutrient_symbols:=
if_else(sum(!!!nutrient_symbols)>1,
!!!nutrient_symbols/sum(!!!nutrient_symbols),
!!!nutrient_symbols),
Unlabeled = 1-sum(!!!nutrient_symbols))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(!!!nutrient_symbols:=
if_else(sum(!!!nutrient_symbols)>1,
!!!nutrient_symbols/sum(!!!nutrient_symbols),
!!!nutrient_symbols),
Unlabeled = 1-sum(!!!nutrient_symbols))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(!!!nutrient_symbols:=
if_else(sum(!!!nutrient_symbols)>1,
!!!nutrient_symbols/sum(!!!nutrient_symbols),
!!!nutrient_symbols))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(!!!nutrient_symols:="maki")
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(all_of(!!!nutrient_symbols),.fns = "maki")
)
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(all_of(!!!nutrient_symbols),.fns = "maki"))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(all_of(!!nutrient_symbols),.fns = "maki"))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(all_of(!!!nutrient_symbols),.fns = "maki"))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(all_of(!!!nutrient_symbols),.fns = "maki")
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(!!!nutrient_symbols,.fns = "maki")
)
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(!!!nutrient_symbols,.fns = "maki"))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(c(!!!nutrient_symbols),.fns = "maki"))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(c(!!!nutrient_symbols),.fns = ~ "maki"))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(c(!!!nutrient_symbols),.fns = ~ if_else(sum(!!!nutrient_symbols)>1,
!!!nutrient_symbols/sum(!!!nutrient_symbols),
!!!nutrient_symbols)))
sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(c(!!!nutrient_symbols),.fns = ~ if_else(sum(!!!nutrient_symbols)>1,
.x/sum(!!!nutrient_symbols),
.x)))
corFC_addUnlab<-function(sum_tb_FC,compound,fact_name,tracer_column){
#tidyverse grouping function
tracer_symbol<-rlang::sym(tracer_column)
nutrient_symbols<-rlang::syms(unique(pull(sum_tb_FC[,tracer_column])))
#Calculate the unlabeled fraction for each sample. Then put back
#in right format by joining to required info and entering missing info
FC_tb<-sum_tb_FC%>%
select(!P)%>%
pivot_wider(names_from=!!tracer_symbol,values_from=compound,
values_fill = 0) %>%
rowwise()%>%   #require to make sum function on next line work per row
mutate(across(c(!!!nutrient_symbols),
.fns = ~ if_else(sum(!!!nutrient_symbols)>1,
.x/sum(!!!nutrient_symbols),.x)),
Unlabeled = 1-sum(!!!nutrient_symbols)) %>%
ungroup()%>%        #undo rowwise grouping
pivot_longer(c(!!!nutrient_symbols,Unlabeled),names_to = tracer_column,
values_to = compound)%>%
left_join(select(sum_tb_FC,!c(compound,datatype)),
by=c(fact_name,tracer_column))%>%
mutate(datatype=if_else(is.na(datatype),"FracCont",datatype))%>%
relocate(P, .after = last_col()) %>%
#set labeling as factor
mutate(!!tracer_symbol:=as_factor(!!tracer_symbol))
return(FC_tb)
}
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
debug(prepare_slicedata)
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
View(slice_tb)
add_FClabels(slice_tb,label_decimals=label_decimals,
percent_add=percent_add,fact_name = fact_name,
tracer_column=tracer_column,
FC_position=FC_position,min_lab_dist=min_lab_dist)%>%
rowwise()
add_FClabels(slice_tb,label_decimals=label_decimals,
percent_add=percent_add,fact_name = fact_name,
tracer_column=tracer_column,
FC_position=FC_position,min_lab_dist=min_lab_dist)
prepare_slicedata<-function(compound_tb,compound,fact_name,tracer_column,
label_decimals,percent_add,FC_position,min_lab_dist,
P_isotopologues){
#todo calculate sum_tb_FC in here (see function other code)
#add calculations P_isotoplogues here
#factors and compounds need to be symbolized to use in
#tidyverse grouping function
fact_symbols<-rlang::syms(fact_name) #list of symbols if multiple names
comp_symbol<- rlang::sym(compound) #one symbol
tracer_symbol<-rlang::sym(tracer_column) #one symbol
#rename P variable for fusing with abundance table that also has P column,
# and compound variable to FracCont as all values are fractional
#contributions. Also adds entry for unlabeled fraction as 1-final sum
sum_tb_FC<-summarize_compounddata(filter(compound_tb,datatype=="FracCont"),
compound=compound,fact_name = fact_name,
tracer_column=tracer_column)%>%
corFC_addUnlab(compound,fact_name = fact_name,
tracer_column=tracer_column)%>%
rename(FracCont=compound,P.FC=P)
#Get abundance per sample and drop tracer column as we want to sum
#disregarding tracer,and P if present as it will be recalculated
sum_tb_ab<-filter(compound_tb,datatype=="Abund")%>%
select(!!! fact_symbols, !!comp_symbol,Abund=compound)
#get average abundance per combination of cohort factors
#meaning averaging over tracers as abundance should not be not tracer
#dependent.
slice_ab_tb<-sum_tb_ab%>%
group_by(!!! fact_symbols) %>%
summarise(Abund := mean(Abund),.groups = "drop")
#Get abundance p values taken together independent of tracer
#after dropping existing P column, join.
if (length(fact_name)==2){
sum_tb_ab<-group_by(sum_tb_ab,!!!rlang::syms(fact_name[2]))
}
slice_ab_tb<-group_modify(
sum_tb_ab,~summarize_addP(.x,
cohortcolumn = fact_name[1],
valuecolumn = "Abund",data_type = "Abund"))%>%
ungroup()%>%
right_join(slice_ab_tb,by=fact_name)%>%
select(P.RA=P,!c(datatype,P))%>%
relocate(P.RA, .after = last_col())
#join abundance table to all tracer to add results to unlabeled as well,
#then join with all and calculate abundance normalized to biggest abundance and
#fraction of abundance per type of label
slice_tb<-full_join(slice_ab_tb,sum_tb_FC,by=fact_name)%>%
mutate(Abund=Abund/max(Abund),Fraction=FracCont*Abund)%>%
ungroup()
#Add FC labels and their positions, make P label and add P label radius
#positions, set informative table names and clean up unneccesary columns
slice_tb<-add_FClabels(slice_tb,label_decimals=label_decimals,
percent_add=percent_add,fact_name = fact_name,
tracer_column=tracer_column,
FC_position=FC_position,min_lab_dist=min_lab_dist)%>%
rowwise()%>%
mutate(P.FClab=case_when(
is.na(P.FC) ~ "",
P.FC==99 ~ "N=1,P=NA",
length(unique(!!tracer_symbol))>2 & P.FC<0.05 ~ "*",
length(unique(!!tracer_symbol))>2 & P.FC<0.1 ~ "`",
length(unique(!!tracer_symbol))>2 & P.FC>=0.05 ~ "",
length(unique(!!tracer_symbol))<=2 & P.FC<0.05 ~paste0("pFC=",
round(P.FC,2),
"*"),
length(unique(!!tracer_symbol))<=2 & P.FC>=0.05 ~ paste0("pFC=",
round(P.FC,2))),
P.RAlab=case_when(
is.na(P.RA) ~ "",
P.RA==99 ~ "N=1,P=NA",
P.RA<0.05 ~ paste0("pRA=",round(P.RA,2),"*"),
P.RA>=0.05 ~ paste0("pRA=",round(P.RA,2))))%>%
ungroup()
}
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
debug(add_FClabels)
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
add_FClabels<-function(slice_tb,label_decimals,percent_add,fact_name,
tracer_column,FC_position,min_lab_dist){
tracer_symbol <- rlang::sym(tracer_column)
slice_tb<-rowwise(slice_tb) %>%    #to apply following functions per row
#Get label, set to ND if not detected in any sample in group. Set label
#of unlabeled fraction to empty if labeling is requested in center
mutate(FracCont=round(FracCont,label_decimals+2),
labFC=if_else(percent_add,paste0(FracCont*100,"%"),
as.character(FracCont*100)),
labFC=if_else(Abund==0,"ND",labFC),
labFC=if_else(any(FC_position=="center"&
!!tracer_symbol=="Unlabeled",
FC_position=="slice" & FracCont==0),"",labFC))%>%
group_by(!!!rlang::syms(fact_name)) %>%
#get labeling positions on FC and abundance axes. Depends if in
#center or in slice. Center if not detected (label ND)
#If slice, set posFC as sum of current and all
#preceding FC's-half the current FC. Set posAb in slice at min_lab_dist radius
#if abundance smaller than twice min_lab_dist.
mutate(FClab_posAngle=if_else(FC_position=="center"|Abund==0,0,
cumsum(FracCont)-FracCont/2),
FClab_posDist=if_else(FC_position=="center"|Abund==0|FracCont==1,
as.double(0),
if_else(Abund<min_lab_dist*2,
as.double(min_lab_dist),
as.double(Abund/2))))%>%
ungroup()                   #undo grouping
}
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
compounds_updated<-colnames(tb)[which(!colnames(tb)%in%
c(colnames(meta_formatted_tb),
"datatype"))]
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
