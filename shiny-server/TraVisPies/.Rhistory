generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
#Todo nonshiny code check FC p value gal6phos = 0.22 without fraction??
debug(corFC_addUnlab)
undebug(corFC_addUnlab)
debug(prepare_slicedata)
undebug(prepare_slicedata)
debug(add_FClabels)
undebug(add_FClabels)
debug(summarize_compounddata)
undebug(summarize_compounddata)
debug(summarize_addP)
undebug(summarize_addP)
debug(generate_pie)
undebug(generate_pie)
debug(make_piechart)
undebug(make_piechart)
debug(obtain_compounddata)
undebug(obtain_compounddata)
#Data file locations and specifications
#rawpath is windows copied folder with files, need this command to properly
#read in R without having to modify the strings by hand
#example: rawpath<-r"(C:\User\Projects\Pie charts)"
#can also specify relative to the project folder using the here::here command
#test data 1-factor
# rawpath<-r"(C:\Users\u0134881\Documents\R\Create figures\Pie charts\Pie charts inputfiles\Pie charts 1factor)"
# path<-gsub("\\\\", "/", rawpath)
path<-here::here("Example_data/Original input")
savepath<-path
metadatafile<-"Input_Example_metadata.csv"
abundancefile<-"Input_Example_RA.csv"
tracerfile<-"Input_Example_FC.csv"
mapcoordsfile<-"Pathway figure coords.csv"
read_csv_clean(file=paste(path,metadatafile,sep = "/"),
remove_empty = T)%>%colnames()
sample_column <-"Sample"
factor_column <- "Cohort"   #"None" if not present, or 1 or two element vector
norm_column <- "None"   #"None" if not present
tracer_column <-"None"                #"None" if not present
#test data 1-factor iso input
# rawpath<-r"(F:\Documents\Code\Github\mec-shiny-apps\shiny-server\TraVisPies\Example_data\Crashes)"
# path<-gsub("\\\\", "/", rawpath)
path<-here::here("Example_data/Crashes")
savepath<-path
metadatafile<-"Input_Example_metadata.csv"
abundancefile<-"Input_Example_RA.csv"
tracerfile<-"Input_Example_isotopologues.csv"
norm_column<-"None"
(meta_tb<-read_csv_clean(paste0(path,"/",metadatafile),remove_empty = T,
remove_rowempty = T))
#Data file locations and specifications
#rawpath is windows copied folder with files, need this command to properly
#read in R without having to modify the strings by hand
#example: rawpath<-r"(C:\User\Projects\Pie charts)"
#can also specify relative to the project folder using the here::here command
#test data 1-factor
# rawpath<-r"(C:\Users\u0134881\Documents\R\Create figures\Pie charts\Pie charts inputfiles\Pie charts 1factor)"
# path<-gsub("\\\\", "/", rawpath)
path<-here::here("Example_data/Original input")
savepath<-path
metadatafile<-"Input_Example_metadata.csv"
abundancefile<-"Input_Example_RA.csv"
tracerfile<-"Input_Example_FC.csv"
mapcoordsfile<-"Pathway figure coords.csv"
read_csv_clean(file=paste(path,metadatafile,sep = "/"),
remove_empty = T)%>%colnames()
sample_column <-"Sample"
factor_column <- "Cohort"   #"None" if not present, or 1 or two element vector
norm_column <- "None"   #"None" if not present
tracer_column <-"None"                #"None" if not present
#test data 1-factor iso input
# rawpath<-r"(F:\Documents\Code\Github\mec-shiny-apps\shiny-server\TraVisPies\Example_data\Crashes)"
# path<-gsub("\\\\", "/", rawpath)
path<-here::here("Example_data/Original input")
savepath<-path
metadatafile<-"Input_Example_metadata.csv"
abundancefile<-"Input_Example_RA.csv"
tracerfile<-"Input_Example_isotopologues.csv"
norm_column<-"None"
(meta_tb<-read_csv_clean(paste0(path,"/",metadatafile),remove_empty = T,
remove_rowempty = T))
sample_column<-colnames(meta_tb)[1]
factor_column<-colnames(meta_tb)[2]
tracer_column <-"None"                #"None" if not present
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = factor_column,
norm_column = norm_column)
abund_tb<-read_csv_clean(paste0(path,"/",abundancefile),remove_empty = T,
remove_rowempty = T)
compounds<-colnames(abund_tb[-which(colnames(abund_tb)==sample_column)])
#test data 2-factor
# rawpath<-r"(C:\Users\u0134881\Documents\R\Create figures\Pie charts\Pie charts inputfiles\Pie charts 2factor)"
# path<-gsub("\\\\", "/", rawpath)
# path<-here::here("Example_data/Other examples for nonUI app/Pie charts 2factor")
# savepath<-path
# metadatafile<-"2factorpies_metadata.csv"
# abundancefile<-"2factorpies_RA.csv"
# tracerfile<-"2factorpies_FC.csv"
# read_csv_clean(file=paste(path,metadatafile,sep = "/"),
#                remove_empty = T)%>%colnames()
# sample_column <-"Sample"
# factor_column <- c("Time","Condition")   #"None" if not present, or 1 or two element vector
# norm_column <- "Normalisation"   #"None" if not present
# tracer_column <-"None"                #"None" if not present
#test data 1-factor different tracers
# rawpath<-r"(F:\Documents\Code\R\Create figures\TraVis Pies\Pie charts inputfiles\Pie charts 1 factor multitracer)"
# path<-gsub("\\\\", "/", rawpath)
# path<-here::here("Example_data/Other examples for nonUI app/Pie charts 1 factor multitracer")
# savepath<-path
# metadatafile<-"MCF001748,74_multitrace_metadata.csv"
# abundancefile<-"MCF001748,74_multitrace_RA.csv"
# tracerfile<-"MCF001748,74_multitrace_FC.csv"
# read_csv_clean(file=paste(path,metadatafile,sep = "/"),
#                remove_empty = T)%>%colnames()
# read_csv_clean(file=paste(path,tracerfile<-"MCF001748,74_multitrace_FC.csv"
# ,sep = "/"),
#                remove_empty = T)%>%colnames()
# sample_column <-"Sample"
# factor_column <- c("Condition")   #"None" if not present, or 1 or two element vector
# norm_column <- "Normalisation"   #"None" if not present
# tracer_column <-"Tracer"                #"None" if not present
#test data 2-factor different tracers
# rawpath<-r"(F:\Documents\Code\R\Create figures\TraVis Pies\Pie charts inputfiles\Pie charts 2factor multitracer)"
# path<-gsub("\\\\", "/", rawpath)
# path<-here::here("Example_data/Other examples for nonUI app/Pie charts 2factor multitracer")
# savepath<-path
# metadatafile<-"2factor_multitrace_metadata.csv"
# abundancefile<-"2factor_multitrace_RA.csv"
# tracerfile<-"2factor_multitrace_FC.csv"
# read_csv_clean(file=paste(path,metadatafile,sep = "/"),
#                remove_empty = T)%>%colnames()
# read_csv_clean(file=paste(path,tracerfile,sep = "/"),
#                remove_empty = T)%>%colnames()
# sample_column <-"Sample"
# factor_column <- c("Condition","Supplementation")   #"None" if not present, or 1 or two element vector
# norm_column <- "Normalisation"   #"None" if not present
# tracer_column <-"Tracer"                #"None" if not present
#Miscellaneous
P_isotopologues<-F                     #leave at false, only input fraction contribution data
log_abund<-F
detail_charts<-T                      #makes images with detail for solo use
pathway_charts<-F                        #also generate images fit for pathway
save_chart<-T                         #save chart images? If false plots in ID
normalize<-(!norm_column=="None")                         #normalize abundances?
print_tables<-F                       #print generated tables to console?
compounds<-NULL                      #which compounds included; NULL => all
show_P<-T                              #show P values on pie plots
compounds<-"Glucose 1,6-bisphosphate"  #TODO:remove
#factors and factor level order
#fact.invert False makes first factor X factor and second Y for grid,
#True is opposite
#factX.levels and factY.levels can be used to set the factor level order
#in the pie chart if the order in the input file is not satisfactory.
#important as the first level will be used as a reference
fact.invert<-F
factX.levels<-NULL #only used in two factor analysis.
# factX.levels<-c("NT","25mM 2DG", "10uM AMA")                    #character vector with order of factor levels in X factor, set NULL to take order in file
factY.levels<-NULL                    #character vector with order of factor levels in Y factor, set NULL to take order in file
# factY.levels<-c("Reference","Treatment1","Treatment2")                    #character vector with order of factor levels in Y factor, set NULL to take order in file
#figure appearance parameters
#any color input recognized by ggplot2::scale_fill_manual can be used
colLabeling<-c("#bfbfbf","#ffd966")   #colors for labeled and unlabeled fraction
# colLabeling<-c("#bfbfbf","#ffd966","lightblue")   #colors for 2 tracers and unlabeled fraction
maxcol_facet<-3                       #maximum amount of images horizontal
include_name<-T                        #include compound name on figure
include_legend<-T                      #include legend on figure
#axis names and fonts, load font library
#Font: set to "sans" to use standard font. For other available options run
#windowsFonts() after loading the extrafont library.If desired font not present,
#check link below on importing fonts:
#https://www.r-bloggers.com/2013/02/change-fonts-in-ggplot2-and-create-xkcd-style-graphs/
xAxLab<-""                            #xlabel, best "" for grids of pies
yAxLab<-""                            #ylabel, best "" for grids of pies
font<-"Calibri"                       #
# font<-"sans"
#figure size parameters in cm for detailed pie charts. A4 landscape is
#recommended: width=24.6 and height 16
width<- 24.6
height<-16
#figure size parameters in cm for summary pie charts for pathway map.
#Recommended width=6.15 and height=2.81
#CURRENTLY NOT USED
# mapwidth<-6.15
# mapheight<-2.81
# mapwidth<-5
# mapheight<-5
#fontsizes on  detailed pie charts: Cohort names above chart, legend names above legend, all others separate)
#when width 24.6=height=16 and font= calibri
# for 2 cohorts 28 24 24 recommended
# for 3 cohorts 18 16 16 recommended
cohortsize<-18                        #text size of cohort names
legendtitlesize<-16                   #set legend font size
otherfontsize<-16                     #adapt text size of all but those above
#fontsizes on summary pie charts for pathway
#when width 6.15=height=2.81 and font= calibri
# for 2 cohorts 28 24 recommended
# for 3 cohorts 24 20 recommended
mapcohortsize<-16
mapotherfontsize<-18
#textlabel fractional contribution parameters
#FCposition sets where FC should be displayed. "center" to display in center,
#"slice" to display in labeled slice
#minLabDist sets minimal distance at which FC label is plotted. 0 is center
#1 is the outer circle. If distance would be smaller based on pie abundance,
#label is plotted at minLabDist  distance from the circle center
FCposition<-"center"
minLabDist<-0.7
labelDecimals<-1                     #amount of decimals in FC label
percentAdd<-T                         #if true adds "%" to the FC label
#linetypes and colour of concentric circles
# circlelinetypes<-c(3,4,2,6)  #concentric lines from inside to out dotted, dot dash, dash, doubledash
# circlelinetypes<-c(3,3,3,3)  #all concentric lines dotted
# circlelinetypes<-c(2,2,2,2)  #all concentric lines dashed
circlelinetypes<-c(1,1,1,1)  #all concentric lines solid
# circlelinetypes<-c(0,0,0,0)  #no concentric circles
circlelinecolor<-"gray"
#Other settings
alpha<-0.7
format<-"png"
#derive settings from input
if(length(factor_column)==1){
twofactor=F
} else if(length(factor_column)==2) {
twofactor=T
} else {
stop("Factor should be set to 'None' if not present, or be a 1 or 2 element vector")
}
#If no tracer column, make dummy column and set tracer column name to Tracer
if(tracer_column=="None") {
tracer_column<-"Labeling"
}
#input metadata and abundance data, put in right format for following functions
meta_formatted_tb<-read_csv_clean(file=paste(path,metadatafile,sep = "/"),
remove_empty = T) %>%
format_metadata(sample_column = sample_column,
factor_column = factor_column,
norm_column = norm_column,
tracer_column=tracer_column)
abund_tb<-read_csv_clean(paste(path,abundancefile,sep = "/"),remove_empty = T)
#read isotopologue or fractional contribution data. Set empty isotopologue tibble
#if no isotopologue data supplied
if(grepl("iso",tracerfile)) {
iso_tb<-extract_col_isotopologues(
read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T),
iso_suffix_sep = "_")
frac_tb<-calculate_FC(iso_tb)
} else {
frac_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
iso_tb<-NULL
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
compounds = compounds)
}
#make sure FCposition is set to slice when multiple tracer nutrients
if (length(unique(pull(meta_formatted_tb[,tracer_column])))>1 &
FCposition =="center") {
FCposition <- "slice"
}
#checks if the right amount of colors is set, sets right amount of default
#distinctive colors (amount of tracers +1 for unlabeled fraction) if not
if (!length(unique(pull(meta_formatted_tb[,tracer_column]))) == length(colLabeling)-1){
if(length(unique(pull(meta_formatted_tb[,tracer_column])))==1) {
colLabeling<-c("#bfbfbf","#ffd966")
} else {
library(RColorBrewer)
colLabeling<-brewer.pal(length(unique(pull(meta_formatted_tb[,tracer_column])))+1,"Accent")
}
}
#generate error or warning messages if any
check_output<-check_samples_compounds(
meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_column = sample_column,
norm_column = norm_column)
if (check_output$error) {
validate(check_output$message)
} else {
outputtext<-check_output$message
}
#Getcompound names from input
if (length(compounds)<length(colnames(abund_tb)[2:ncol(abund_tb)])) {
compounds<-colnames(abund_tb)[2:ncol(abund_tb)]
}
#merge all input into one table, get compounds and factor orders
tb<-merge_input(meta_tb = meta_formatted_tb,abund_tb = abund_tb,frac_tb = frac_tb,
compounds=compounds, sample_col = sample_column,
iso_tb=iso_tb)
compounds_updated<-colnames(tb)[which(!colnames(tb)%in%
c(colnames(meta_formatted_tb),
"datatype"))]
compounds_updated<-"Citric_acid"  #for checking specific compound only
#make list of factor orders per factor to allow multiple factors
fact_order<-list(NULL)
for (i in 1:length(factor_column)) {
fact_order[[i]]<-unique(pull(tb,!!factor_column[i]))
}
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
#Todo nonshiny code check FC p value gal6phos = 0.22 without fraction??
debug(corFC_addUnlab)
undebug(corFC_addUnlab)
debug(prepare_slicedata)
undebug(prepare_slicedata)
debug(add_FClabels)
undebug(add_FClabels)
debug(summarize_compounddata)
undebug(summarize_compounddata)
debug(summarize_addP)
undebug(summarize_addP)
debug(generate_pie)
undebug(generate_pie)
debug(make_piechart)
undebug(make_piechart)
debug(obtain_compounddata)
undebug(obtain_compounddata)
prepare_slicedata<-function(compound_tb,compound,fact_name,tracer_column,
label_decimals,percent_add,FC_position,min_lab_dist,
P_isotopologues){
#todo calculate sum_tb_FC in here (see function other code)
#add calculations P_isotoplogues here
#factors and compounds need to be symbolized to use in
#tidyverse grouping function
fact_symbols<-rlang::syms(fact_name) #list of symbols if multiple names
comp_symbol<- rlang::sym(compound) #one symbol
tracer_symbol<-rlang::sym(tracer_column) #one symbol
#rename P variable for fusing with abundance table that also has P column,
# and compound variable to FracCont as all values are fractional
#contributions. Also adds entry for unlabeled fraction as 1-final sum
sum_tb_FC<-summarize_compounddata(filter(compound_tb,datatype=="FracCont"),
compound=compound,fact_name = fact_name,
tracer_column=tracer_column)%>%
corFC_addUnlab(compound,fact_name = fact_name,
tracer_column=tracer_column)%>%
full_join(summarize_compounddata(
filter(compound_tb,!datatype %in% c("FracCont","Abund")),
compound=compound,fact_name = fact_name,tracer_column=tracer_column))%>%
rename(FracCont=compound,P.FC=P) %>%
#set labeling as factor
mutate(!!tracer_symbol:=as_factor(!!tracer_symbol))
#Get abundance per sample and drop tracer column as we want to sum
#disregarding tracer,and P if present as it will be recalculated
sum_tb_ab<-filter(compound_tb,datatype=="Abund")%>%
select(!!! fact_symbols, !!comp_symbol,Abund=compound)
#get average abundance per combination of cohort factors
#meaning averaging over tracers as abundance should not be not tracer
#dependent.
slice_ab_tb<-sum_tb_ab%>%
group_by(!!! fact_symbols) %>%
summarise(Abund := mean(Abund),.groups = "drop")
#Get abundance p values taken together independent of tracer
#after dropping existing P column, join.
if (length(fact_name)==2){
sum_tb_ab<-group_by(sum_tb_ab,!!!rlang::syms(fact_name[2]))
}
slice_ab_tb<-group_modify(
sum_tb_ab,~summarize_addP(.x,
cohortcolumn = fact_name[1],
valuecolumn = "Abund",data_type = "Abund"))%>%
ungroup()%>%
right_join(slice_ab_tb,by=fact_name)%>%
select(P.RA=P,!c(datatype,P))%>%
relocate(P.RA, .after = last_col())
#join abundance table to all tracer to add results to unlabeled as well,
#then join with all and calculate abundance normalized to biggest abundance and
#fraction of abundance per type of label
slice_tb<-full_join(slice_ab_tb,sum_tb_FC,by=fact_name)%>%
mutate(Abund=Abund/max(Abund),Fraction=FracCont*Abund)%>%
filter(!(Abund==0 & !!tracer_symbol!="Unlabeled"))%>%
ungroup()
#Add FC labels and their positions, make P label and add P label radius
#positions, set informative table names and clean up unneccesary columns
slice_tb<-add_FClabels(slice_tb,label_decimals=label_decimals,
percent_add=percent_add,fact_name = fact_name,
tracer_column=tracer_column,
FC_position=FC_position,min_lab_dist=min_lab_dist)%>%
ungroup()%>%
mutate(P.FClab=case_when(
is.na(P.FC) ~ "",
P.FC==99 ~ "N=1,P=NA",
length(unique(!!tracer_symbol))>2 & P.FC<0.05 ~ "*",
length(unique(!!tracer_symbol))>2 & P.FC>=0.05 ~ "",
length(unique(!!tracer_symbol))<=2 & P.FC<0.05 ~paste0("pFC=",
round(P.FC,2),
"*"),
length(unique(!!tracer_symbol))<=2 & P.FC>=0.05 ~ paste0("pFC=",
round(P.FC,2))),
P.RAlab=case_when(
is.na(P.RA) ~ "",
P.RA==99 ~ "N=1,P=NA",
P.RA<0.05 ~ paste0("pRA=",round(P.RA,2),"*"),
P.RA>=0.05 ~ paste0("pRA=",round(P.RA,2))),
#for multitracer data only display small FCs if they are significantly changed
# labFC=if_else(length(unique(!!tracer_symbol))>2 &
#                 Fraction*100<10^-label_decimals/2,"",labFC)
)
#If required, add * to cohort name if any isotopologue P < 0.05
#don't add anything if all are NA (reference cohort)
#todo shiny: add support isotopologues twofactor
if (P_isotopologues) {
#make variable to store factor levels that have significant isotopologue
#difference
levels_orig<-levels(pull(slice_tb[,fact_name]))
iso_cols<-colnames(slice_tb)[which(substr(colnames(slice_tb),1,4)=="P.FC")]
for (i in levels_orig) {
#get P's of isotopologues from first entry,
#check if any significant, add 1 to vector to avoid warnings
iso_Ps<-unlist(slice_tb[
which(slice_tb[,fact_name]==i & slice_tb[,tracer_column]=="Unlabeled"),
iso_cols],use.names = F)
#add * to level name if significant
if (min(c(iso_Ps,1),na.rm = T)<0.05) {
newname<-paste0(i,"*")
slice_tb<-slice_tb %>%
mutate(!!fact_name:=recode(!!!fact_symbols,!!i := newname))
}
}
}
return(slice_tb)
}
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
library(shiny); runApp('app_localuse.R')
runApp('app_localuse.R')
