# metadatafile<-"2factor_multitrace_metadata.csv"
# abundancefile<-"2factor_multitrace_RA.csv"
# fracconfile<-"2factor_multitrace_FC.csv"
# read_csv_clean(file=paste(path,metadatafile,sep = "/"),
#                remove_empty = T)%>%colnames()
# read_csv_clean(file=paste(path,fracconfile,sep = "/"),
#                remove_empty = T)%>%colnames()
# sample_column <-"Sample"
# factor_column <- c("Condition","Supplementation")   #"None" if not present, or 1 or two element vector
# norm_column <- "Normalisation"   #"None" if not present
# tracer_column <-"Tracer"                #"None" if not present
#Miscellaneous
P_isotopologues<-F                     #leave at false, only input fraction contribution data
log_abund<-F
detail_charts<-T                      #makes images with detail for solo use
pathway_charts<-F                        #also generate images fit for pathway
save_chart<-T                         #save chart images? If false plots in ID
normalize<-(!norm_column=="None")                         #normalize abundances?
print_tables<-F                       #print generated tables to console?
compounds<-NULL                      #which compounds included; NULL => all
show_P<-T                              #show P values on pie plots
compounds<-"Glucose 1,6-bisphosphate"  #TODO:remove
#factors and factor level order
#fact.invert False makes first factor X factor and second Y for grid,
#True is opposite
#factX.levels and factY.levels can be used to set the factor level order
#in the pie chart if the order in the input file is not satisfactory.
#important as the first level will be used as a reference
fact.invert<-F
factX.levels<-NULL #only used in two factor analysis.
# factX.levels<-c("NT","25mM 2DG", "10uM AMA")                    #character vector with order of factor levels in X factor, set NULL to take order in file
factY.levels<-NULL                    #character vector with order of factor levels in Y factor, set NULL to take order in file
# factY.levels<-c("Reference","Treatment1","Treatment2")                    #character vector with order of factor levels in Y factor, set NULL to take order in file
#figure appearance parameters
#any color input recognized by ggplot2::scale_fill_manual can be used
colLabeling<-c("#bfbfbf","#ffd966")   #colors for labeled and unlabeled fraction
# colLabeling<-c("#bfbfbf","#ffd966","lightblue")   #colors for 2 tracers and unlabeled fraction
maxcol_facet<-3                       #maximum amount of images horizontal
include_name<-T                        #include compound name on figure
include_legend<-T                      #include legend on figure
#axis names and fonts, load font library
#Font: set to "sans" to use standard font. For other available options run
#windowsFonts() after loading the extrafont library.If desired font not present,
#check link below on importing fonts:
#https://www.r-bloggers.com/2013/02/change-fonts-in-ggplot2-and-create-xkcd-style-graphs/
xAxLab<-""                            #xlabel, best "" for grids of pies
yAxLab<-""                            #ylabel, best "" for grids of pies
font<-"Calibri"                       #
# font<-"sans"
#figure size parameters in cm for detailed pie charts. A4 landscape is
#recommended: width=24.6 and height 16
width<- 24.6
height<-16
#figure size parameters in cm for summary pie charts for pathway map.
#Recommended width=6.15 and height=2.81
#CURRENTLY NOT USED
# mapwidth<-6.15
# mapheight<-2.81
# mapwidth<-5
# mapheight<-5
#fontsizes on  detailed pie charts: Cohort names above chart, legend names above legend, all others separate)
#when width 24.6=height=16 and font= calibri
# for 2 cohorts 28 24 24 recommended
# for 3 cohorts 18 16 16 recommended
cohortsize<-18                        #text size of cohort names
legendtitlesize<-16                   #set legend font size
otherfontsize<-16                     #adapt text size of all but those above
#fontsizes on summary pie charts for pathway
#when width 6.15=height=2.81 and font= calibri
# for 2 cohorts 28 24 recommended
# for 3 cohorts 24 20 recommended
mapcohortsize<-16
mapotherfontsize<-18
#textlabel fractional contribution parameters
#FCposition sets where FC should be displayed. "center" to display in center,
#"slice" to display in labeled slice
#minLabDist sets minimal distance at which FC label is plotted. 0 is center
#1 is the outer circle. If distance would be smaller based on pie abundance,
#label is plotted at minLabDist  distance from the circle center
FCposition<-"center"
minLabDist<-0.7
labelDecimals<-1                     #amount of decimals in FC label
percentAdd<-T                         #if true adds "%" to the FC label
#linetypes and colour of concentric circles
# circlelinetypes<-c(3,4,2,6)  #concentric lines from inside to out dotted, dot dash, dash, doubledash
# circlelinetypes<-c(3,3,3,3)  #all concentric lines dotted
# circlelinetypes<-c(2,2,2,2)  #all concentric lines dashed
circlelinetypes<-c(1,1,1,1)  #all concentric lines solid
# circlelinetypes<-c(0,0,0,0)  #no concentric circles
circlelinecolor<-"gray"
#Other settings
alpha<-0.7
format<-"png"
#derive settings from input
if(length(factor_column)==1){
twofactor=F
} else if(length(factor_column)==2) {
twofactor=T
} else {
stop("Factor should be set to 'None' if not present, or be a 1 or 2 element vector")
}
#If no tracer column, make dummy column and set tracer column name to Tracer
if(tracer_column=="None") {
tracer_column<-"Labeling"
}
#input metadata and abundance data, put in right format for following functions
meta_formatted_tb<-read_csv_clean(file=paste(path,metadatafile,sep = "/"),
remove_empty = T) %>%
format_metadata(sample_column = sample_column,
factor_column = factor_column,
norm_column = norm_column,
tracer_column=tracer_column)
abund_tb<-read_csv_clean(paste(path,abundancefile,sep = "/"),remove_empty = T)
#read isotopologue or fractional contribution data. Set empty isotopologue tibble
#if no isotopologue data supplied
if(grepl("iso",tracerfile)) {
iso_tb<-extract_col_isotopologues(
read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T),
iso_suffix_sep = "_")
frac_tb<-calculate_FC(iso_tb)
} else {
frac_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
iso_tb<-NULL
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
compounds = compounds)
}
#Per compound adapt FC's below 0 (artefacts due to natural abundance
#correction) to be positive to avoid problems with the visualisations
#later on.
for (i in (2:ncol(frac_tb))) {
if (any(frac_tb[,i]<0)) {
FCs<-pull(frac_tb[,i])
FCs[which(FCs<0)]<-FCs[which(FCs<0)]-min(FCs[which(FCs<0)])
frac_tb[,i]<-FCs
}
}
#make sure FCposition is set to slice when multiple tracer nutrients
if (length(unique(pull(meta_formatted_tb[,tracer_column])))>1 &
FCposition =="center") {
FCposition <- "slice"
}
#checks if the right amount of colors is set, sets right amount of default
#distinctive colors (amount of tracers +1 for unlabeled fraction) if not
if (!length(unique(pull(meta_formatted_tb[,tracer_column]))) == length(colLabeling)-1){
if(length(unique(pull(meta_formatted_tb[,tracer_column])))==1) {
colLabeling<-c("#bfbfbf","#ffd966")
} else {
library(RColorBrewer)
colLabeling<-brewer.pal(length(unique(pull(meta_formatted_tb[,tracer_column])))+1,"Accent")
}
}
#generate error or warning messages if any
check_output<-check_samples_compounds(
meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_column = sample_column,
norm_column = norm_column)
if (check_output$error) {
validate(check_output$message)
} else {
outputtext<-check_output$message
}
#Getcompound names from input
if (length(compounds)<length(colnames(abund_tb)[2:ncol(abund_tb)])) {
compounds<-colnames(abund_tb)[2:ncol(abund_tb)]
}
#merge all input into one table, get compounds and factor orders
tb<-merge_input(meta_tb = meta_formatted_tb,abund_tb = abund_tb,frac_tb = frac_tb,
compounds=compounds, sample_col = sample_column,
iso_tb=iso_tb)
compounds_updated<-colnames(tb)[which(!colnames(tb)%in%
c(colnames(meta_formatted_tb),
"datatype"))]
compounds_updated<-compounds_updated[1]  #for checking specific compound only
#make list of factor orders per factor to allow multiple factors
fact_order<-list(NULL)
for (i in 1:length(factor_column)) {
fact_order[[i]]<-unique(pull(tb,!!factor_column[i]))
}
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
compounds_updated<-colnames(tb)[which(!colnames(tb)%in%
c(colnames(meta_formatted_tb),
"datatype"))]
compounds_updated
compounds_updated<-"Sorbitol"  #for checking specific compound only
#make list of factor orders per factor to allow multiple factors
fact_order<-list(NULL)
for (i in 1:length(factor_column)) {
fact_order[[i]]<-unique(pull(tb,!!factor_column[i]))
}
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
warnings()
library(shiny); runApp('app_localuse.R')
runApp('app_localuse.R')
#derive settings from input
if(length(factor_column)==1){
twofactor=F
} else if(length(factor_column)==2) {
twofactor=T
} else {
stop("Factor should be set to 'None' if not present, or be a 1 or 2 element vector")
}
#If no tracer column, make dummy column and set tracer column name to Tracer
if(tracer_column=="None") {
tracer_column<-"Labeling"
}
#input metadata and abundance data, put in right format for following functions
meta_formatted_tb<-read_csv_clean(file=paste(path,metadatafile,sep = "/"),
remove_empty = T) %>%
format_metadata(sample_column = sample_column,
factor_column = factor_column,
norm_column = norm_column,
tracer_column=tracer_column)
abund_tb<-read_csv_clean(paste(path,abundancefile,sep = "/"),remove_empty = T)
#read isotopologue or fractional contribution data. Set empty isotopologue tibble
#if no isotopologue data supplied
if(grepl("iso",tracerfile)) {
iso_tb<-extract_col_isotopologues(
read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T),
iso_suffix_sep = "_")
frac_tb<-calculate_FC(iso_tb)
} else {
frac_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
iso_tb<-NULL
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
compounds = compounds)
}
#Per compound adapt FC's below 0 (artefacts due to natural abundance
#correction) to be positive to avoid problems with the visualisations
#later on.
# for (i in (2:ncol(frac_tb))) {
#   if (any(frac_tb[,i]<0)) {
#     FCs<-pull(frac_tb[,i])
#     FCs[which(FCs<0)]<-FCs[which(FCs<0)]-min(FCs[which(FCs<0)])
#     frac_tb[,i]<-FCs
#   }
# }
#make sure FCposition is set to slice when multiple tracer nutrients
if (length(unique(pull(meta_formatted_tb[,tracer_column])))>1 &
FCposition =="center") {
FCposition <- "slice"
}
#checks if the right amount of colors is set, sets right amount of default
#distinctive colors (amount of tracers +1 for unlabeled fraction) if not
if (!length(unique(pull(meta_formatted_tb[,tracer_column]))) == length(colLabeling)-1){
if(length(unique(pull(meta_formatted_tb[,tracer_column])))==1) {
colLabeling<-c("#bfbfbf","#ffd966")
} else {
library(RColorBrewer)
colLabeling<-brewer.pal(length(unique(pull(meta_formatted_tb[,tracer_column])))+1,"Accent")
}
}
#generate error or warning messages if any
check_output<-check_samples_compounds(
meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_column = sample_column,
norm_column = norm_column)
if (check_output$error) {
validate(check_output$message)
} else {
outputtext<-check_output$message
}
#Getcompound names from input
if (length(compounds)<length(colnames(abund_tb)[2:ncol(abund_tb)])) {
compounds<-colnames(abund_tb)[2:ncol(abund_tb)]
}
#merge all input into one table, get compounds and factor orders
tb<-merge_input(meta_tb = meta_formatted_tb,abund_tb = abund_tb,frac_tb = frac_tb,
compounds=compounds, sample_col = sample_column,
iso_tb=iso_tb)
compounds_updated<-colnames(tb)[which(!colnames(tb)%in%
c(colnames(meta_formatted_tb),
"datatype"))]
compounds_updated<-"Sorbitol"  #for checking specific compound only
#make list of factor orders per factor to allow multiple factors
fact_order<-list(NULL)
for (i in 1:length(factor_column)) {
fact_order[[i]]<-unique(pull(tb,!!factor_column[i]))
}
#generate figures per compound with specified settings and save if requested
generate_multiple_pies(tb,compounds=compounds_updated,
detail_charts=detail_charts,
pathway_charts=pathway_charts,
savepath=savepath,
normalize=normalize,
fact_name=factor_column,
tracer_column=tracer_column,
fact_order=fact_order,
P_isotopologues=P_isotopologues,
log_abund=log_abund,
label_decimals=labelDecimals,
percent_add=percentAdd,
FC_position=FCposition,
min_lab_dist=minLabDist,
circlelinecolor=circlelinecolor,
circlelinetypes=circlelinetypes,
maxcol_facet=maxcol_facet,
include_name=include_name,
show_P=show_P,
col_labeling=colLabeling,
alpha=alpha,
otherfontsize=otherfontsize,
font=font,
legendtitlesize=legendtitlesize,
cohortsize=cohortsize,
include_legend=include_legend,
format=format,
mapotherfontsize=mapotherfontsize,
mapcohortsize=mapcohortsize)
#Todo nonshiny code check FC p value gal6phos = 0.22 without fraction??
debug(corFC_addUnlab)
undebug(corFC_addUnlab)
debug(prepare_slicedata)
undebug(prepare_slicedata)
debug(add_FClabels)
undebug(add_FClabels)
debug(summarize_compounddata)
undebug(summarize_compounddata)
debug(summarize_addP)
undebug(summarize_addP)
debug(generate_pie)
undebug(generate_pie)
debug(make_piechart)
undebug(make_piechart)
debug(obtain_compounddata)
undebug(obtain_compounddata)
merge_input<-function(meta_tb,abund_tb,frac_tb,iso_tb=NULL,
sample_col="Sample",compounds) {
#Per compound adapt FC's below 0 (artefacts due to natural abundance
#correction) to be positive to avoid problems with the visualisations
#later on.
print(frac_tb)
for (i in (2:ncol(frac_tb))) {
if (any(frac_tb[,i]<0)) {
FCs<-pull(frac_tb[,i])
FCs[which(FCs<0)]<-FCs[which(FCs<0)]-min(FCs[which(FCs<0)])
frac_tb[,i]<-FCs
}
}
#modify iso_tb if it exists before summarizing
if (length(iso_tb)>0) {
#Per compound adapt isotopologues's below 0 (artefacts due to natural abundance
#correction) to be positive to avoid problems with the visualisations
#later on
for (i in (2:nrow(iso_tb))) {
if (any(iso_tb[i,]<0)) {
#check if any value for this isotopologue below 0
metabolite<-iso_tb$Metabolite[i]
isos<-iso_tb[i,-c(1,2)]
negisos<-which(isos<0)
print(negisos)
# print(metabolite)
#if no values negative, skip this section to avoid empty reference
#warnings and useless computing. If negatives, no zero correction was done
#before and should be done now
if (length(negisos)>0) {
#Make variable containing negative iso value and 0 for others
#then overwrite negative iso values to 0
toadd<-isos
toadd[-negisos]<-0
isos[negisos]<-0
iso_tb[i,-c(1,2)]<-isos
#add negative iso values to parent to offset previous addition to
#parent to compensate negative values
parent_index<-which(iso_tb$Metabolite==metabolite &
iso_tb$Isotopologue==0)
iso_tb[parent_index,-c(1,2)]<-iso_tb[parent_index,-c(1,2)]+toadd
#if any parents became <0, set to 0 (likely parent was undetectable)
iso_tb[parent_index,][which(iso_tb[parent_index,]<0&
is.numeric(iso_tb[parent_index,]))]<-0
}
}
}
#summarize isotopologue data with name sample column
iso_tb<-summarize_isotopologue(iso_tb,sample_colname = sample_col)
}
#rename sample column in all inputs
meta_tb<-rename(meta_tb,Sample=all_of(sample_col))
abund_tb<-rename(abund_tb,Sample=all_of(sample_col))
frac_tb<-rename(frac_tb,Sample=all_of(sample_col))
#add metadata to abundance and fractional contribution data respectively
#retaining only selected samples, and drop metabolites with 0 abundance
#in every sample to avoid errors
abund_tb<-left_join(meta_tb,abund_tb,by="Sample") %>%
select(1:ncol(meta_tb),any_of(compounds)) %>%
select_if(has_nonzero)
frac_tb<-left_join(meta_tb,frac_tb,by="Sample") %>%
select(1:ncol(meta_tb),any_of(colnames(abund_tb)))
if(!length(iso_tb)==0) {
iso_tb<-left_join(meta_tb,iso_tb,by="Sample") %>%
select(1:ncol(meta_tb),any_of(colnames(abund_tb)))
}
#add fractional contribution and isotopologues equal to 100% unlabeled to
#compounds in abundance but not fraction labeling table
if (any(!colnames(abund_tb) %in% colnames(frac_tb))) {
nolabnames<-colnames(abund_tb)[which(! colnames(abund_tb) %in%
colnames(frac_tb))]
for (i in nolabnames) {
frac_tb$new<-0
colnames(frac_tb)[ncol(frac_tb)]<-i
}
if(!length(iso_tb)==0) {
for (i in nolabnames) {
iso_tb$new<-"1"
colnames(iso_tb)[ncol(iso_tb)]<-i
}
}
}
#prepare abundance data for joining:
#calculate normalized abundances if normalization column provided and add
#to abund tb as different datatype.
#add as character as isotopologue summaries will be character too
abund_tb <-abund_tb %>% add_column(datatype="Abund")
if ("Normalisation" %in% colnames(meta_tb)) {
abund_tb<-abund_tb %>%
mutate(across((ncol(meta_tb)+1):(ncol(abund_tb)-1),
function(x) x/Normalisation)) %>%
mutate(datatype="NormAbund") %>%
full_join(abund_tb,by=colnames(abund_tb)) %>%
mutate(across(any_of(compounds),as.character))
} else {
abund_tb<-abund_tb %>%mutate(across(any_of(compounds),as.character))
}
#prepare labeling  data for joining:
#Add isotopologue data to fractional contribution data
frac_tb <-frac_tb %>% mutate(across(any_of(compounds),as.character)) %>%
add_column(datatype="FracCont")
if(!length(iso_tb)==0) {
iso_tb$datatype<-"Isotopologues"
frac_tb<-full_join(frac_tb,iso_tb,by=colnames(frac_tb))
}
tb<-full_join(frac_tb,abund_tb,by=colnames(abund_tb))
#join all tables then order and remove normalisation factor if present
tb<-full_join(frac_tb,abund_tb,by=colnames(abund_tb)) %>%
select(colnames(meta_tb),datatype,everything())
if ("Normalisation" %in% colnames(meta_tb)) {
tb<-select(tb,-Normalisation)
}
return(tb)
}
runApp('app_localuse.R')
