tracer_column)))
} else {
meta_tb<-transmute(meta_tb,
!!sample_symbol := as.character(pull(meta_tb,
sample_column)),
!!fact_symbol := as.character(pull(meta_tb,factor_column)),
Normalisation=as.numeric(Normalisation),
!!tracer_symbol := as.character(pull(meta_tb,
tracer_column)))
}
if (norm_column=="None") meta_tb<-select(meta_tb,-Normalisation)
return(meta_tb)
}
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = cohort_column,
norm_column = norm_column)
format_metadata<-function(meta_tb,sample_column,factor_column,norm_column=NULL,
tracer_column="Labeling") {
sample_symbol<-rlang::sym(sample_column)
tracer_symbol<-rlang::sym(tracer_column)
if (length(factor_column)<2) {
fact_symbol<-rlang::sym(factor_column)
} else if (length(factor_column)==2){
fact_symbol<-rlang::syms(factor_column)
} else {
stop("At most 2 factor variables can be specified in TraVis Pies")
}
#check normalisation, drop Normalisation column if exists but not selected
#add dummy if no normalisation required, otherwise rename correct column
if(length(norm_column==0)) norm_column=="None"
if ("Normalisation" %in% colnames(meta_tb) & norm_column != "Normalisation") {
meta_tb<-select(meta_tb,-Normalisation)
}
if (norm_column == "None") {
meta_tb$Normalisation<-1
} else {
meta_tb<-rename(meta_tb,Normalisation=all_of(norm_column))
}
#check tracer column presence. If not there, add dummytracer as tracer name,
#setting all levels to Labeled
#in case there is fraccon or not this will function accordingly
if (!tracer_column %in% colnames(meta_tb)) {
print("Either only one tracer nutrient was used or the column specifying the nutrient is missing. Assuming only one tracer nutrient was used.")
meta_tb[,tracer_column]<-"Labeled"
}
#check factor column, add dummy if no factors given
if (factor_column[1]=="None" ) {
meta_tb$Cohort<-"SingleCohort"
factor_column<-"Cohort"
fact_symbol<-rlang::sym(factor_column)
}
#Order columns, drop all unrequired columns and set type
#factor set to single type if None, or use pull for as.factor
#best use := to use !! demasking environmental variable as name
#(as_factor might also work but I had issues and dropped it)
#drop normalisation column if dummy
if (length(factor_column)==2){
meta_tb<-transmute(meta_tb,
!!sample_symbol := as.character(pull(meta_tb,
sample_column)),
!!fact_symbol[[1]] := as.character(pull(meta_tb,
factor_column[1])),
!!fact_symbol[[2]] := as.character(pull(meta_tb,
factor_column[2])),
Normalisation=as.numeric(Normalisation),
!!tracer_symbol := as.character(pull(meta_tb,
tracer_column)))
} else {
meta_tb<-transmute(meta_tb,
!!sample_symbol := as.character(pull(meta_tb,
sample_column)),
!!fact_symbol := as.character(pull(meta_tb,factor_column)),
Normalisation=as.numeric(Normalisation),
!!tracer_symbol := as.character(pull(meta_tb,
tracer_column)))
}
if (norm_column=="None") meta_tb<-select(meta_tb,-Normalisation)
return(meta_tb)
}
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = cohort_column,
norm_column = norm_column)
debug(format_metadata)
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = cohort_column,
norm_column = norm_column)
force(meta_tb)
View(meta_tb)
format_metadata<-function(meta_tb,sample_column,factor_column,norm_column=NULL,
tracer_column="Labeling") {
sample_symbol<-rlang::sym(sample_column)
tracer_symbol<-rlang::sym(tracer_column)
if (length(factor_column)<2) {
fact_symbol<-rlang::sym(factor_column)
} else if (length(factor_column)==2){
fact_symbol<-rlang::syms(factor_column)
} else {
stop("At most 2 factor variables can be specified in TraVis Pies")
}
#check normalisation, drop Normalisation column if exists but not selected
#add dummy if no normalisation required, otherwise rename correct column
if(length(norm_column)==0) norm_column=="None"
if ("Normalisation" %in% colnames(meta_tb) & norm_column != "Normalisation") {
meta_tb<-select(meta_tb,-Normalisation)
}
if (norm_column == "None") {
meta_tb$Normalisation<-1
} else {
meta_tb<-rename(meta_tb,Normalisation=all_of(norm_column))
}
#check tracer column presence. If not there, add dummytracer as tracer name,
#setting all levels to Labeled
#in case there is fraccon or not this will function accordingly
if (!tracer_column %in% colnames(meta_tb)) {
print("Either only one tracer nutrient was used or the column specifying the nutrient is missing. Assuming only one tracer nutrient was used.")
meta_tb[,tracer_column]<-"Labeled"
}
#check factor column, add dummy if no factors given
if (factor_column[1]=="None" ) {
meta_tb$Cohort<-"SingleCohort"
factor_column<-"Cohort"
fact_symbol<-rlang::sym(factor_column)
}
#Order columns, drop all unrequired columns and set type
#factor set to single type if None, or use pull for as.factor
#best use := to use !! demasking environmental variable as name
#(as_factor might also work but I had issues and dropped it)
#drop normalisation column if dummy
if (length(factor_column)==2){
meta_tb<-transmute(meta_tb,
!!sample_symbol := as.character(pull(meta_tb,
sample_column)),
!!fact_symbol[[1]] := as.character(pull(meta_tb,
factor_column[1])),
!!fact_symbol[[2]] := as.character(pull(meta_tb,
factor_column[2])),
Normalisation=as.numeric(Normalisation),
!!tracer_symbol := as.character(pull(meta_tb,
tracer_column)))
} else {
meta_tb<-transmute(meta_tb,
!!sample_symbol := as.character(pull(meta_tb,
sample_column)),
!!fact_symbol := as.character(pull(meta_tb,factor_column)),
Normalisation=as.numeric(Normalisation),
!!tracer_symbol := as.character(pull(meta_tb,
tracer_column)))
}
if (norm_column=="None") meta_tb<-select(meta_tb,-Normalisation)
return(meta_tb)
}
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = cohort_column,
norm_column = norm_column)
debug(format_metadata)
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = cohort_column,
norm_column = norm_column)
length(norm_column)
length(norm_column)==0
#check normalisation, drop Normalisation column if exists but not selected
#add dummy if no normalisation required, otherwise rename correct column
if(length(norm_column)==0) norm_column=="None"
#check normalisation, drop Normalisation column if exists but not selected
#add dummy if no normalisation required, otherwise rename correct column
if(length(norm_column)==0) norm_column=="None"
norm_column
format_metadata<-function(meta_tb,sample_column,factor_column,norm_column=NULL,
tracer_column="Labeling") {
sample_symbol<-rlang::sym(sample_column)
tracer_symbol<-rlang::sym(tracer_column)
if (length(factor_column)<2) {
fact_symbol<-rlang::sym(factor_column)
} else if (length(factor_column)==2){
fact_symbol<-rlang::syms(factor_column)
} else {
stop("At most 2 factor variables can be specified in TraVis Pies")
}
#check normalisation, drop Normalisation column if exists but not selected
#add dummy if no normalisation required, otherwise rename correct column
if(length(norm_column)==0) norm_column<-"None"
if ("Normalisation" %in% colnames(meta_tb) & norm_column != "Normalisation") {
meta_tb<-select(meta_tb,-Normalisation)
}
if (norm_column == "None") {
meta_tb$Normalisation<-1
} else {
meta_tb<-rename(meta_tb,Normalisation=all_of(norm_column))
}
#check tracer column presence. If not there, add dummytracer as tracer name,
#setting all levels to Labeled
#in case there is fraccon or not this will function accordingly
if (!tracer_column %in% colnames(meta_tb)) {
print("Either only one tracer nutrient was used or the column specifying the nutrient is missing. Assuming only one tracer nutrient was used.")
meta_tb[,tracer_column]<-"Labeled"
}
#check factor column, add dummy if no factors given
if (factor_column[1]=="None" ) {
meta_tb$Cohort<-"SingleCohort"
factor_column<-"Cohort"
fact_symbol<-rlang::sym(factor_column)
}
#Order columns, drop all unrequired columns and set type
#factor set to single type if None, or use pull for as.factor
#best use := to use !! demasking environmental variable as name
#(as_factor might also work but I had issues and dropped it)
#drop normalisation column if dummy
if (length(factor_column)==2){
meta_tb<-transmute(meta_tb,
!!sample_symbol := as.character(pull(meta_tb,
sample_column)),
!!fact_symbol[[1]] := as.character(pull(meta_tb,
factor_column[1])),
!!fact_symbol[[2]] := as.character(pull(meta_tb,
factor_column[2])),
Normalisation=as.numeric(Normalisation),
!!tracer_symbol := as.character(pull(meta_tb,
tracer_column)))
} else {
meta_tb<-transmute(meta_tb,
!!sample_symbol := as.character(pull(meta_tb,
sample_column)),
!!fact_symbol := as.character(pull(meta_tb,factor_column)),
Normalisation=as.numeric(Normalisation),
!!tracer_symbol := as.character(pull(meta_tb,
tracer_column)))
}
if (norm_column=="None") meta_tb<-select(meta_tb,-Normalisation)
return(meta_tb)
}
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = cohort_column,
norm_column = norm_column)
#     }
#     #join metabolite name and isotopologue suffix
#     iso_et_tb$Isotopologue[i]<- paste0(metabolite,isotext)
#
#     #increase isotopologue count
#     isotopologue<-isotopologue+1
#   }
# }
# Test --------------------------------------------------------------------
#test crash merger
rawpath<-r"(F:\Documents\Code\Github\mec-shiny-apps\shiny-server\TraVisPies\Example_data\Crashes)"
path<-gsub("\\\\", "/", rawpath)
savepath<-path
metadatafile<-"Input_MCF1711_metadata.csv"
abundancefile<-"Input_MCF1711_RA.csv"
tracerfile<-"Input_MCF1711_isotopologues.csv"
norm_column<-NULL
(meta_tb<-read_csv_clean(paste0(path,"/",metadatafile),remove_empty = T,
remove_rowempty = T))
sample_column<-colnames(meta_tb)[1]
cohort_column<-colnames(meta_tb)[2]
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = cohort_column,
norm_column = norm_column)
abund_tb<-read_csv_clean(paste0(path,"/",metadatafile),remove_empty = T,
remove_rowempty = T)
compounds<-colnames(abund_tb())[-which(colnames(abund_tb())==
input$sample_column)]
compounds<-colnames(abund_tb[-which(colnames(abund_tb())==
compounds<-colnames(abund_tb[-which(colnames(abund_tb)==
input$sample_column)])
compounds<-colnames(abund_tb[-which(colnames(abund_tb)==sample_column)])
abund_tb<-read_csv_clean(paste0(path,"/",abundancefile),remove_empty = T,
remove_rowempty = T)
compounds<-colnames(abund_tb[-which(colnames(abund_tb)==sample_column)])
if(grepl("iso",tracerfile)) {
iso_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
frac_tb<-"g"
} else {
frac_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
compounds = compounds)
}
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
compounds = compounds)
meta_formatted_tb<-format_metadata(meta_tb = meta_tb,
sample_column = sample_column,
factor_column = cohort_column,
norm_column = norm_column)
abund_tb<-read_csv_clean(paste0(path,"/",abundancefile),remove_empty = T,
remove_rowempty = T)
compounds<-colnames(abund_tb[-which(colnames(abund_tb)==sample_column)])
if(grepl("iso",tracerfile)) {
iso_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
frac_tb<-"g"
} else {
frac_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
compounds = compounds)
}
tracerfile<-"Input_MCF1711_isotopologues.csv"
grepl("iso",tracerfile)
if(grepl("iso",tracerfile)) {
iso_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
frac_tb<-calculate_FC(iso_tb)
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
iso_tb = iso_tb,
compounds = compounds)
} else {
frac_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
compounds = compounds)
}
iso_tb<-read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T)
frac_tb<-calculate_FC(iso_tb)
iso_tb<-extract_col_isotopologues(
read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T),
iso_suffix_sep = "_")
frac_tb<-calculate_FC(iso_tb)
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
iso_tb = iso_tb,
compounds = compounds)
iso_tb<-extract_col_isotopologues(
read_csv_clean(paste0(path,"/",tracerfile),remove_empty = T,
remove_rowempty = T),
iso_suffix_sep = "_")
frac_tb<-calculate_FC(iso_tb)
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
iso_tb = iso_tb,
compounds = compounds)
debug(merge_input)
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
iso_tb = iso_tb,
compounds = compounds)
View(iso_tb)
View(isos)
which(iso_tb$Metabolite==metabolite &
iso_tb$Isotopologue==0)
iso_tb[parent_index,-c(1,2)]+toadd
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
iso_tb = iso_tb,
compounds = compounds)
iso_tb[parent_index,]
iso_tb[parent_index,][which(iso_tb[parent_index,]<0)]
which(iso_tb[parent_index,]<0)
iso_tb[parent_index,]
iso_tb[parent_index,]<0
which(iso_tb[parent_index,]<0)
which(pull(iso_tb[parent_index,])<0)
which(pull(iso_tb[parent_index,])<0)
pull(iso_tb[parent_index,])
iso_tb[parent_index,]
iso_tb[parent_index,1]
iso_tb[parent_index,1]<0
pull(iso_tb[parent_index,1])<0
pull(iso_tb[parent_index,1])
"uma"<0
"(2 and/or 3-)Phosphoglyceric_acid"<0
merge_input<-function(meta_tb,abund_tb,frac_tb,iso_tb=NULL,
sample_col="Sample",compounds) {
#Per compound adapt FC's below 0 (artefacts due to natural abundance
#correction) to be positive to avoid problems with the visualisations
#later on.
for (i in (2:ncol(frac_tb))) {
if (any(frac_tb[,i]<0)) {
FCs<-pull(frac_tb[,i])
FCs[which(FCs<0)]<-FCs[which(FCs<0)]-min(FCs[which(FCs<0)])
}
}
#modify iso_tb if it exists before summarizing
if (length(iso_tb)>0) {
#Per compound adapt isotopologues's below 0 (artefacts due to natural abundance
#correction) to be positive to avoid problems with the visualisations
#later on
for (i in (2:nrow(iso_tb))) {
if (any(iso_tb[i,]<0)) {
#check if any value for this isotopologue below 0
metabolite<-iso_tb$Metabolite[i]
isos<-iso_tb[i,-c(1,2)]
negisos<-which(isos<0)
print(metabolite)
#if no values negative, skip this section to avoid empty reference
#warnings and useless computing. If negatives, no zero correction was done
#before and should be done now
if (length(negisos)>0) {
#Make variable containing negative iso value and 0 for others
#then overwrite negative iso values to 0
toadd<-isos
toadd[-negisos]<-0
isos[negisos]<-0
iso_tb[i,-c(1,2)]<-isos
#add negative iso values to parent to offset previous addition to
#parent to compensate negative values
parent_index<-which(iso_tb$Metabolite==metabolite &
iso_tb$Isotopologue==0)
iso_tb[parent_index,-c(1,2)]<-iso_tb[parent_index,-c(1,2)]+toadd
#if any parents became <0, set to 0 (likely parent was undetectable)
iso_tb[parent_index,][which(iso_tb[parent_index,]<0&
is.numeric(iso_tb[parent_index,]))]<-0
}
}
}
#summarize isotopologue data with name sample column
iso_tb<-summarize_isotopologue(iso_tb,sample_colname = sample_col)
}
#rename sample column in all inputs
meta_tb<-rename(meta_tb,Sample=all_of(sample_col))
abund_tb<-rename(abund_tb,Sample=all_of(sample_col))
frac_tb<-rename(frac_tb,Sample=all_of(sample_col))
#add metadata to abundance and fractional contribution data respectively
#retaining only selected samples, and drop metabolites with 0 abundance
#in every sample to avoid errors
abund_tb<-left_join(meta_tb,abund_tb,by="Sample") %>%
select(1:ncol(meta_tb),any_of(compounds)) %>%
select_if(has_nonzero)
frac_tb<-left_join(meta_tb,frac_tb,by="Sample") %>%
select(1:ncol(meta_tb),any_of(colnames(abund_tb)))
if(!length(iso_tb)==0) {
iso_tb<-left_join(meta_tb,iso_tb,by="Sample") %>%
select(1:ncol(meta_tb),any_of(colnames(abund_tb)))
}
#add fractional contribution and isotopologues equal to 100% unlabeled to
#compounds in abundance but not fraction labeling table
if (any(!colnames(abund_tb) %in% colnames(frac_tb))) {
nolabnames<-colnames(abund_tb)[which(! colnames(abund_tb) %in%
colnames(frac_tb))]
for (i in nolabnames) {
frac_tb$new<-0
colnames(frac_tb)[ncol(frac_tb)]<-i
}
if(!length(iso_tb)==0) {
for (i in nolabnames) {
iso_tb$new<-"1"
colnames(iso_tb)[ncol(iso_tb)]<-i
}
}
}
#prepare abundance data for joining:
#calculate normalized abundances if normalization column provided and add
#to abund tb as different datatype.
#add as character as isotopologue summaries will be character too
abund_tb <-abund_tb %>% add_column(datatype="Abund")
if ("Normalisation" %in% colnames(meta_tb)) {
abund_tb<-abund_tb %>%
mutate(across((ncol(meta_tb)+1):(ncol(abund_tb)-1),
function(x) x/Normalisation)) %>%
mutate(datatype="NormAbund") %>%
full_join(abund_tb,by=colnames(abund_tb)) %>%
mutate(across(any_of(compounds),as.character))
} else {
abund_tb<-abund_tb %>%mutate(across(any_of(compounds),as.character))
}
#prepare labeling  data for joining:
#Add isotopologue data to fractional contribution data
frac_tb <-frac_tb %>% mutate(across(any_of(compounds),as.character)) %>%
add_column(datatype="FracCont")
if(!length(iso_tb)==0) {
iso_tb$datatype<-"Isotopologues"
frac_tb<-full_join(frac_tb,iso_tb,by=colnames(frac_tb))
}
tb<-full_join(frac_tb,abund_tb,by=colnames(abund_tb))
#join all tables then order and remove normalisation factor if present
tb<-full_join(frac_tb,abund_tb,by=colnames(abund_tb)) %>%
select(colnames(meta_tb),datatype,everything())
if ("Normalisation" %in% colnames(meta_tb)) {
tb<-select(tb,-Normalisation)
}
return(tb)
}
merged<-merge_input(meta_tb = meta_formatted_tb,
abund_tb = abund_tb,
frac_tb = frac_tb,
sample_col = sample_column,
iso_tb = iso_tb,
compounds = compounds)
runApp('app localversion removeme.R')
runApp('app localversion removeme.R')
